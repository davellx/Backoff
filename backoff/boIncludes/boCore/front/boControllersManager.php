<?phpnamespace boCore\front; /**  *  *  */ class boControllersManager{	private static $actions = array();	public static $navData = array();	/** 	 * Constructor 	 */ 	private function __construct(){            // useless 	}	public static function launchAction($action=''){            if(count(boControllersManager::$actions) == 0){                throw new \ErrorException("No action was registered in the main Controller, try to use boControllersManager::register('myaction','myclass');");            }            // if action is not set, that means we have to use the URL based action            $path_info = @$_SERVER['ORIG_PATH_INFO'];            if (!$path_info) $path_info = @$_SERVER['PATH_INFO'];            if (!$path_info) $path_info = @$_SERVER['REQUEST_URI'];            $path_info = str_replace([$_SERVER['SCRIPT_NAME'],'b2b'], '', $path_info);            $path_info = explode("?",$path_info)[0];            //$path_info = str_replace('//', '', $path_info);//            if(strpos($path_info,'index.php') !== false){//                $path_info = explode('index.php',@$_SERVER['ORIG_PATH_INFO']);//                $path_info = isset($path_info[1])?$path_info[1]:false;//            }            $navVars = ($action === '')?$path_info:$action;            $navVars = explode("/",$navVars);            //var_dump(boControllersManager::$actions);            // remove empty keys            $empty_elements = array_keys($navVars,"");            foreach ($empty_elements as $e)                unset($navVars[$e]);            $navVars = array_merge(array(),$navVars);            boControllersManager::$navData = $navVars;            $controlClass;            if(!isset($navVars[0]) || !isset(boControllersManager::$actions[$navVars[0]])){                if(isset(boControllersManager::$actions['default'])){                    $controlClass = new boControllersManager::$actions['default'];                }else{                    throw new \ErrorException("No default action was registered in the main Controller, try to add 'default' in the \$registeredActions of your controller class.");                }            }else{                $controlClass = new boControllersManager::$actions[$navVars[0]];            }            if(!isset($controlClass)){                throw new \ErrorException("This should not be happening.");            }else{                if(!isset($navVars[1])){                    $controlClass->default();                }else{                    $controlClass->{$navVars[1]}();                }            }            die();	}	/*		really inspired by loadModels from Doctrine	*/	public static function loadControllers($repertoires){       if ($repertoires !== null) {            foreach ((array) $repertoires as $rep) {				$rep = rtrim($rep, '/');				if ( ! is_dir($rep)) {				    throw new ErrorException('You must pass a valid path to a directory containing controllers');				}				$it = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($repertoires),\RecursiveIteratorIterator::LEAVES_ONLY);				foreach ($it as $file) {					$e = explode('.', $file->getFileName());					if (end($e) === 'php'){						$declaredBefore = get_declared_classes();						require_once($file->getPathName());						$declaredAfter = get_declared_classes();						// Using array_slice because array_diff is broken is some PHP versions						$foundClasses = array_slice($declaredAfter, count($declaredBefore));						foreach ($foundClasses as $className) {							$class = new \ReflectionClass($className);							if ($class->isSubclassOf('\boCore\front\boBaseController')) {								$actions = new \ReflectionProperty($className,'registeredActions');								boControllersManager::register($actions->getValue(),$className);							}						}					}				}			}		}	}	public static function register($actions,$className){		if((array) $actions){			$nbactions = count($actions);			for($i = 0; $i < $nbactions; $i++){				if(is_string($actions[$i]))					boControllersManager::$actions[$actions[$i]] = $className;			}		}	} }